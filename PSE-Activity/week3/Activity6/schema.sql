PRAGMA foreign_keys = ON;

-- Core reference tables
CREATE TABLE IF NOT EXISTS SCHOOL (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS PROGRAMME (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  school_id INTEGER NOT NULL,
  name TEXT NOT NULL,
  UNIQUE(school_id, name),
  FOREIGN KEY (school_id) REFERENCES SCHOOL(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS COURSE (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  school_id INTEGER NOT NULL,
  code TEXT NOT NULL,
  title TEXT NOT NULL,
  UNIQUE(school_id, code),
  FOREIGN KEY (school_id) REFERENCES SCHOOL(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS LECTURER (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  school_id INTEGER NOT NULL,
  name TEXT NOT NULL,
  email TEXT,
  FOREIGN KEY (school_id) REFERENCES SCHOOL(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS STUDENT (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL,
  email TEXT UNIQUE
);

-- Physical locations
CREATE TABLE IF NOT EXISTS CAMPUS (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS BUILDING (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  campus_id INTEGER NOT NULL,
  name TEXT NOT NULL,
  UNIQUE(campus_id, name),
  FOREIGN KEY (campus_id) REFERENCES CAMPUS(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS ROOM (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  building_id INTEGER NOT NULL,
  name TEXT NOT NULL,
  capacity INTEGER DEFAULT 0,
  UNIQUE(building_id, name),
  FOREIGN KEY (building_id) REFERENCES BUILDING(id) ON DELETE CASCADE
);

-- Programme/Course junction
CREATE TABLE IF NOT EXISTS PROGRAMME_COURSE (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  programme_id INTEGER NOT NULL,
  course_id INTEGER NOT NULL,
  UNIQUE(programme_id, course_id),
  FOREIGN KEY (programme_id) REFERENCES PROGRAMME(id) ON DELETE CASCADE,
  FOREIGN KEY (course_id) REFERENCES COURSE(id) ON DELETE CASCADE
);

-- Course prereq (self-ref)
CREATE TABLE IF NOT EXISTS COURSE_PREREQUISITE (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  course_id INTEGER NOT NULL,
  prereq_course_id INTEGER NOT NULL,
  UNIQUE(course_id, prereq_course_id),
  FOREIGN KEY (course_id) REFERENCES COURSE(id) ON DELETE CASCADE,
  FOREIGN KEY (prereq_course_id) REFERENCES COURSE(id) ON DELETE CASCADE
);

-- Time/Offering
CREATE TABLE IF NOT EXISTS SEMESTER (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL UNIQUE,
  start_date TEXT NOT NULL,  -- ISO YYYY-MM-DD
  end_date TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS COURSE_OFFERING (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  course_id INTEGER NOT NULL,
  semester_id INTEGER NOT NULL,
  campus_id INTEGER NOT NULL,
  section TEXT NOT NULL,
  UNIQUE(course_id, semester_id, section),
  FOREIGN KEY (course_id) REFERENCES COURSE(id) ON DELETE CASCADE,
  FOREIGN KEY (semester_id) REFERENCES SEMESTER(id) ON DELETE CASCADE,
  FOREIGN KEY (campus_id) REFERENCES CAMPUS(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS OFFERING_LECTURER (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  offering_id INTEGER NOT NULL,
  lecturer_id INTEGER NOT NULL,
  role TEXT, -- e.g., 'Coordinator', 'Tutor'
  UNIQUE(offering_id, lecturer_id),
  FOREIGN KEY (offering_id) REFERENCES COURSE_OFFERING(id) ON DELETE CASCADE,
  FOREIGN KEY (lecturer_id) REFERENCES LECTURER(id) ON DELETE CASCADE
);

-- Meetings (Room bookings)
CREATE TABLE IF NOT EXISTS MEETING (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  offering_id INTEGER NOT NULL,
  room_id INTEGER NOT NULL,
  day_of_week INTEGER NOT NULL, -- 1=Mon ... 7=Sun
  start_time TEXT NOT NULL,     -- 'HH:MM'
  end_time TEXT NOT NULL,
  FOREIGN KEY (offering_id) REFERENCES COURSE_OFFERING(id) ON DELETE CASCADE,
  FOREIGN KEY (room_id) REFERENCES ROOM(id) ON DELETE CASCADE
);

-- Enrollment & assessment
CREATE TABLE IF NOT EXISTS ENROLLMENT (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  offering_id INTEGER NOT NULL,
  student_id INTEGER NOT NULL,
  status TEXT DEFAULT 'ENROLLED',
  UNIQUE(offering_id, student_id),
  FOREIGN KEY (offering_id) REFERENCES COURSE_OFFERING(id) ON DELETE CASCADE,
  FOREIGN KEY (student_id) REFERENCES STUDENT(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS ASSESSMENT (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  offering_id INTEGER NOT NULL,
  name TEXT NOT NULL,
  weight REAL NOT NULL,
  FOREIGN KEY (offering_id) REFERENCES COURSE_OFFERING(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS SUBMISSION (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  assessment_id INTEGER NOT NULL,
  student_id INTEGER NOT NULL,
  score REAL,
  UNIQUE(assessment_id, student_id),
  FOREIGN KEY (assessment_id) REFERENCES ASSESSMENT(id) ON DELETE CASCADE,
  FOREIGN KEY (student_id) REFERENCES STUDENT(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS ATTENDANCE (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  enrollment_id INTEGER NOT NULL,
  meeting_id INTEGER NOT NULL,
  present INTEGER NOT NULL CHECK (present IN (0,1)),
  UNIQUE(enrollment_id, meeting_id),
  FOREIGN KEY (enrollment_id) REFERENCES ENROLLMENT(id) ON DELETE CASCADE,
  FOREIGN KEY (meeting_id) REFERENCES MEETING(id) ON DELETE CASCADE
);
